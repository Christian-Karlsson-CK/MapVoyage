@page
@model WebApplication1testingRazor.Pages.PrivacyModel
@{
    // Check if user is authenticated.If they are, it assigns their name to username.
    // If not, it assigns the string "NotCurrentUser" to username.
    var username = User.Identity.IsAuthenticated ? User.Identity.Name : "NotCurrentUser";
    var loadedPins = System.IO.File.ReadAllText("wwwroot/data/pinLocations.json");
}
<h1>@ViewData["Title"]</h1>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map</title>
    <link rel="stylesheet" href="~/css/mapView.css" />
</head>
<body>
    <div id="toolbar">
        <button id="addPinButton">Add Pin</button>
    </div>
    <div id="map"></div>

    <div id="SearchAndFilter">
        <input type="text" id="searchInput" placeholder="Search..." />
        <button onclick="searchLocation()">Search</button>
        <select id="categoryDropdown" name="dropdown">
            <option value="">All Locations</option>
            <option value="pins">Pins</option>
        </select>

    </div>
    <div id="sidebar">
        <!--<input type="text" id="searchBar" placeholder="Search for pins..." oninput="filterPins()">-->
        <div id="info">Click on a marker to see details here.</div>
        <button id="removePinButton" style="display:none;" onclick="removePin()">Remove Pin</button>
        <button id="addToFavoritesButton" style="display:none;" onclick="addToFavorites()">Add to favorites</button>
    </div>


    <div id="pinCreateForm">
        <label for="pinTitle">Title:</label>
        <input type="text" id="pinTitle" name="pinTitle" /><br>
        <label for="pinDescription">Description:</label>
        <input type="text" id="pinDescription" name="pinDescription" /><br>
        <label for="pinImage">Image:</label>
        <input type="file" id="pinImage" name="pinImage" accept="image/*" /><br>
        <button id="savePin">Save Pin</button>
        <button id="cancelPin">Cancel Pin</button>
    </div>

    <div id="ratingForm" style="display: none">
        <label for="pinRating">Rate this location:</label>
        <select id="pinRating">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select>
        <button id="submitRating">Submit Rating</button>
    </div>


    <script src="~/js/mapView.js"></script>
   

    <!-- The favorite list -->
    <div id="favorite-list" "class="container">
        <h3>My Favorite List</h3>
    </div>

    <!-- This is a hidden div and a custom data attribute (@username) that stores the username -->
    <div id="currentUser" dataUsername="@username" style="display: none;"></div>

    <!--This is a hidden form to assign values to when a new pin is created by the user. -->
    <form id="SendPinDataForm" method="post" style="display: none;">
        <input id="owner" name="Owner" />
        <input id="latitude" name="Latitude" />
        <input id="longitude" name="Longitude" />
        <input id="title" name="Title" />
        <input id="description" name="Description" />
        <button type="submit" class="btn btn-primary">Submit Coordinates</button>
    </form>



    <!-- Testing retriving pindata from backend
    <div id="dataContainer">
    @if (Model.PinDescription != null)
    {
                <h2>@Model.PinTitle</h2>
    }
    else
    {
                <h2>No Title</h2>
    }

    @if (Model.PinDescription != null)
    {
                <p>@Model.PinDescription</p>
    }
    else
    {
                <p>No desc</p>
    }
    </div> -->
    <!--This is a hidden form to assign a pin ID to when a pin is selected by the user to retrieve pin data to be displayed.
        The input named handler is needed to navigate to correct OnGet() method as asp.pages-handler can only be used on POST.
    -->
    <form id="GetPinDataForm" method="get" style="display: none;">
        <input id="id" name="Id" />
        <input id="handler" name="Handler" value="PinData" />
        <button type="submit" class="btn btn-primary">Submit PinID</button>
    </form>

    <script>
        var LoadedPins = [];
        var LoadedPins = @Html.Raw(loadedPins);
        //Script to add all pins on map upon page loading in
        document.addEventListener('DOMContentLoaded', (event) => {
            var ratingForm = document.getElementById('ratingForm');
            var submitRatingButton = document.getElementById('submitRating');

            // Funktion för att visa rating-formuläret när en pin klickas
            function showRatingForm(pin) {
                ratingForm.style.display = 'block';
                // Lägg till event listener för submit-knappen
                submitRatingButton.onclick = function () {
                    var rating = document.getElementById('pinRating').value;
                    submitRating(pin.latitude, pin.longitude, rating);
                };
            }

            // Funktion för att hantera pin-klick-händelse
            function onPinClick(pin) {
                showRatingForm(pin);
            }

            fetch('/Privacy?handler=AllPinData')
                .then(response => response.json())
                .then(data => {
                    if (data.length > 0) {
                        data.forEach(pin => addPinToMap(pin));
                    } else {
                        console.log('No map pins found.');
                    }
                })
                .catch(error => console.error('Error fetching pin data:', error));

            const params = new URLSearchParams();
            params.append('loggedinUser', document.getElementById('currentUser').getAttribute('dataUsername'));

            fetch('/Privacy?handler=UserViewAndFavorites&' + params.toString())
                .then(response => response.json())
                .then(data => {
                    if (data) {
                        map.setView([data.viewLatitude, data.viewLongitude], data.viewZoomLevel); // Update map view
                        console.log('Setting saved view.');
                        
                        data.favoriteList.forEach(addToFavoritesList);
                        
                        
                    } else {
                        map.setView([58.0, 13.0], 13); // Set default view
                        console.log('No saved view, setting default.');
                    }
                })
                .catch(error => console.error('Error fetching pin data:', error));

            function addToFavoritesList(item) { 
                var pinData = {
                    Latitude: '',
                    Longitude: '',
                    Title: ''
                };
                //Make a fetch to get pin title and coordinates
                const params = new URLSearchParams();
                params.append('pinId', item);
                console.log('before fetch');
                fetch('/Privacy?handler=PinData&' + params.toString())
                    .then(response => response.json())
                    .then(pin => {
                        if (pin) {
                            console.log('receivedpinDATA');
                            pinData.Latitude = pin.latitude;
                            pinData.Longitude = pin.longitude;
                            pinData.Title = pin.title;

                            // Create a new div element for the favorite item
                            const divHolder = document.createElement('div');
                            divHolder.className = 'favorite-item';

                            // Create the span element for the item text
                            const textElement = document.createElement('span');
                            textElement.className = 'item-text';
                            textElement.textContent = pinData.Title;

                            // Create the remove button
                            const removeButton = document.createElement('button');
                            removeButton.className = 'remove-button';
                            removeButton.textContent = 'Remove';
                            removeButton.onclick = function () { removeItem(this, item); };

                            // Append the text and button to the new item
                            divHolder.appendChild(textElement);
                            divHolder.appendChild(removeButton);

                            divHolder.addEventListener('click', function () {
                                var lat = parseFloat(pin.latitude);
                                var lng = parseFloat(pin.longitude);
                                map.setView([lat, lng], 13);
                            });

                            document.getElementById('favorite-list').appendChild(divHolder);

                        } else {
                            console.log('No saved pin found.');
                        }
                    })
                    .catch(error => console.error('Error fetching pin data:', error));

                
                
            }

            function removeItem(button, id) {
                const item = button.parentElement;
                item.remove();

                $.ajax({
                    url: '/Privacy?handler=RemoveFavorite',
                    type: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify(id),
                });

            }


            function submitRating(lat, lng, rating) {
        var ratingData = {
            Latitude: lat,
            Longitude: lng,
            Rating: parseInt(rating)
        };

        $.ajax({
            url: '/Privacy?handler=AddRating',
            type: 'POST',
            dataType: 'json',
            contentType: 'application/json',
            data: JSON.stringify(ratingData),
            success: function () {
                alert('Rating submitted successfully!');
                ratingForm.style.display = 'none'; // Dölj formuläret efter inskickning
            },
            error: function (error) {
                console.error('Error submitting rating:', error);
            }
        });
    }
        });

        //If closing tab save the map view
        window.addEventListener('beforeunload', function (e) {
            saveMapView();
        });


        document.getElementById('savePin').addEventListener('click', function () {
            var title = document.getElementById('pinTitle').value;
            var description = document.getElementById('pinDescription').value;
            var rating = parseInt(document.getElementById('pinRating').value) || 0;
            var imageInput = document.getElementById('pinImage');
            var imageFile = imageInput.files[0];
            var username = document.getElementById('currentUser').getAttribute('dataUsername');

            var newPin = {
                owner: username,
                latitude: lat,
                longitude: lng,
                title: title,
                description: description,
                ratings: [{ username: username, rating: rating }],
                imageLink: null
            };

            if (imageFile) {
                var reader = new FileReader();
                reader.onload = function (event) {
                    newPin.imageLink = event.target.result;
                    addPinToMap(newPin);
                    savePinData(newPin);
                    
                };
                reader.readAsDataURL(imageFile);
            } else {
                addPinToMap(newPin);
                savePinData(newPin);
                
            }

            //console.log("savePin reached");
            

            // Ajax POST request to send new pin data
           /* $.ajax({
                url: '/Privacy',
                type: 'POST',
                dataType: 'text',
                contentType: "application/json",
                data: JSON.stringify(newPin)
            });*/

            var pinForm = document.getElementById('pinCreateForm');
            pinForm.style.display = 'none';
            clearForm();
            addingPin = false;
        });

        function savePinData(pin) {
            // Ajax POST request to send new pin data
            $.ajax({
                url: '/Privacy',
                type: 'POST',
                dataType: 'text',
                contentType: "application/json",
                data: JSON.stringify(pin),
                success: function (response) {
                    console.log("Pin data saved successfully:", response);
                },
                error: function (xhr, status, error) {
                    console.error("Error saving pin data:", error);
                }
            });
        }

        
        //separation for function creating pin so it can be used in different context if needed and ease of reading
        function addPinToMap(pin) {
            var marker = L.marker([pin.latitude, pin.longitude]).addTo(map);
            console.log("addpintomap reached");
            console.log(pin.owner);
            console.log(pin.imageLink);
            marker.on('click', function (e) {
                var pinInfo = {
                    owner: pin.owner,
                    title: pin.title,
                    description: pin.description,
                    latitude: pin.latitude,
                    longitude: pin.longitude,
                    imageLink: pin.imageLink,
                    ratings: pin.ratings || []
                };

                var avgRating = 0;
                if (pinInfo.ratings.length > 0) {
                    var totalRating = pinInfo.ratings.reduce((sum, rating) => sum + rating.rating, 0);
                    avgRating = totalRating / pinInfo.ratings.length;
                }

                var pinDetailsHtml = `<b>Created by: ${pinInfo.owner}</br>Title: ${pinInfo.title}</b><br>Description: ${pinInfo.description}`;
                if (pinInfo.imageLink) {
                    pinDetailsHtml += `<br><img src="${pinInfo.imageLink}" alt="${pinInfo.title}" style="max-width: 100%; height: auto;">`;
                }
                pinDetailsHtml += `<br>Average Rating: ${avgRating.toFixed(1)}/5`; // Visa medelvärdet av betygen

                document.getElementById('info').innerHTML = pinDetailsHtml;

                var currentUser = document.getElementById('currentUser').getAttribute('dataUsername');
                var removeButton = document.getElementById('removePinButton');
                if (pinInfo.owner === currentUser) {
                    removeButton.style.display = 'block';
                    removeButton.onclick = function () { removePin(pinInfo.latitude, pinInfo.longitude); };
                } else {
                    removeButton.style.display = 'none';
                }

                
                var addToFavoritesButton = document.getElementById('addToFavoritesButton');
                addToFavoritesButton.style.display = 'block';
                addToFavoritesButton.onclick = function () { addToFavorites(pin.id); };

                // Show rating form and handle rating submission
                document.getElementById('ratingForm').style.display = 'block';
                document.getElementById('submitRating').onclick = function () {
                    var rating = parseInt(document.getElementById('pinRating').value);
                    submitRating(pinInfo.latitude, pinInfo.longitude, rating);
                };
            });

            LoadedPins.push(marker);
        }

        function submitRating(latitude, longitude, rating) {
            var ratingData = {
                Latitude: latitude,
                Longitude: longitude,
                Rating: rating
            };

            $.ajax({
                url: '/Privacy?handler=AddRating',
                type: 'POST',
                dataType: 'text',
                contentType: "application/json",
                data: JSON.stringify(ratingData),
                success: function () {
                    alert("Rating submitted successfully!");
                },
                error: function () {
                    alert("Failed to submit rating.");
                }
            });
        }

        // Make a search by tab to search button and press 'Enter' key
        $(document).ready(function () {
            $('#searchInput').keydown(function (e) {
                if (e.key === 'Enter') { // Use 'Enter' for better readability
                    e.preventDefault(); // Prevent form submission if within a form
                    searchLocation();
                }
            });

        });


    </script>
    <script src="~/js/search.js"></script>

</body>
</html>


